{"version":3,"sources":["assets/images/doge-a.png","config.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","id","method","params","basePrice","baseAmount","Row","styled","section","Percentage","div","Container","Ticker","DogeThumbnail","doge","Price","App","useState","price","state","setState","setClient","connect","client","W3CWebSocket","onopen","send","JSON","stringify","onmessage","message","parse","data","p","parseFloat","onclose","_closeEvent","setTimeout","newClient","useEffect","toFixed","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAAe,MAA0B,mCCA5BA,EACJ,kCADIA,EAEQ,CACjBC,GAAI,EACJC,OAAQ,YACRC,OAAQ,CACN,sBANOH,EASL,CACJI,UAAW,KACXC,WAAY,K,OCJVC,EAAMC,IAAOC,QAAV,kGAMHC,EAAaF,IAAOG,IAAV,mVAuBVC,EAAYJ,IAAOG,IAAV,mHAOTE,EAASL,IAAOG,IAAV,gGAMNG,EAAgBN,IAAOG,IAAV,qJACOI,GAOpBC,EAAQR,IAAOG,IAAV,uJAkEIM,EAtDO,WAAO,IAAD,EACAC,mBAAgB,CACxCC,MAAO,IAFiB,mBACnBC,EADmB,KACZC,EADY,OAIEH,mBAAc,MAJhB,mBAIXI,GAJW,WAMpBC,EAAU,SAAVA,IACJ,IAAMC,EAAS,IAAIC,eAAaxB,GAkBhC,OAjBAuB,EAAOE,OAAS,kBAAMF,EAAOG,KAAKC,KAAKC,UAAU5B,KACjDuB,EAAOM,UAAY,SAACC,GAAa,IAAD,EAExBZ,EAAK,UADKS,KAAKI,MAAMD,EAAQE,MACbA,YAAX,aAAG,EAAcC,EACxBf,GACFE,EAAS,2BACJD,GADG,IAEND,MAAOgB,WAAWhB,OAIxBK,EAAOY,QAAU,SAACC,GAChB,OAAOC,YAAW,WAChB,IAAMC,EAAYhB,IAClBD,EAAUiB,KACT,MAEEf,GAQT,OALAgB,qBAAU,WACR,IAAMhB,EAASD,IACfD,EAAUE,KACT,IAGD,cAACZ,EAAD,UACE,cAACC,EAAD,UACE,eAACN,EAAD,WACE,cAACS,EAAD,qBACOI,EAAMD,MAAMsB,QAAQ,MAE3B,cAAC3B,EAAD,IACA,cAACJ,EAAD,UAEIU,EAAMD,MAAQlB,EAAYI,UAA1B,WACQqC,KAAKC,MAAkD,KAA3CvB,EAAMD,MAAQlB,EAAYI,UAAY,IAD1D,gBAEQqC,KAAKC,MAAkD,KAA3C1C,EAAYI,UAAYe,EAAMD,MAAQ,IAF1D,eClGCyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3e448f82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/doge-a.bae8cd05.png\";","export const config = {\n  wsUri: 'wss://stream.binance.com/stream',\n  connectionOptions: {\n    id: 2,\n    method: 'SUBSCRIBE',\n    params: [\n      'dogeusdt@aggTrade',\n    ]\n  },\n  user: {\n    basePrice: 0.036,\n    baseAmount: 1000,\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\"\nimport styled from 'styled-components'\n\nimport doge from './assets/images/doge-a.png'\nimport { config } from './config'\n\nconst Row = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Percentage = styled.div`\n  font-size: 70px;\n  animation: colorRotate 3s linear 0s infinite;\n\n  @keyframes colorRotate {\n    from {\n      color: #6666ff;\n    }\n    10% {\n      color: #0099ff;\n    }\n    50% {\n      color: #00ff00;\n    }\n    75% {\n      color: #ff3399;\n    }\n    100% {\n      color: #6666ff;\n    }\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 97vh;\n`\n\nconst Ticker = styled.div`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n`\n\nconst DogeThumbnail = styled.div`\n  background-image: url(${doge});\n  background-size: cover;\n  background-repeat: no-repeat;\n  width: 9em;\n  height: 9em;\n`\n\nconst Price = styled.div`\n  color: yellow;\n  margin: 0em 0.3em 0em 0em;\n  font-size: 7em;\n  font-family: \"Comic Sans MS\", \"Comic Sans\", cursive;\n`\n\ninterface State {\n  price: number\n  error?: Error\n}\n\nconst App: React.FC = () => {\n  const [state, setState] = useState<State>({\n    price: 0,\n  })\n  const [client, setClient] = useState<any>(null)\n\n  const connect = (): W3CWebSocket => {\n    const client = new W3CWebSocket(config.wsUri)\n    client.onopen = () => client.send(JSON.stringify(config.connectionOptions))\n    client.onmessage = (message) => {\n      const payload = JSON.parse(message.data as string)\n      const price = payload.data?.p\n      if (price) {\n        setState({\n          ...state,\n          price: parseFloat(price)\n        })\n      }\n    }\n    client.onclose = (_closeEvent) => {\n      return setTimeout(() => {\n        const newClient = connect()\n        setClient(newClient)\n      }, 1000)\n    }\n    return client\n  }\n\n  useEffect(() => {\n    const client = connect()\n    setClient(client)\n  }, [])\n\n  return (\n    <Container>\n      <Ticker>\n        <Row>\n          <Price>\n            {`$${state.price.toFixed(4)}`}\n          </Price>\n          <DogeThumbnail />\n          <Percentage>\n            {\n              state.price > config.user.basePrice\n                ? `+${Math.round((state.price / config.user.basePrice - 1) * 100)}%`\n                : `-${Math.round((config.user.basePrice / state.price - 1) * 100)}%`\n            }\n          </Percentage>\n        </Row>\n      </Ticker>\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}